{"version":3,"sources":["components/mainNavbar.tsx","services/repository.ts","services/helper.ts","components/cartHeader.tsx","components/currencyItem.tsx","components/addButton.tsx","components/addModal.tsx","components/currencyCart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainNavbar","Navbar","variant","bg","expand","Brand","as","Link","to","process","BASE_URL","getCurrency","base","axios","get","then","response","data","getName","key","name","formatCurrency","input","formatMoney","CartHeader","onChange","e","props","onBaseChange","value","options","this","baseOptions","map","label","Row","style","marginBottom","Col","xs","md","Form","Control","type","amount","className","borderRadius","React","CurrencyItem","formatKeyName","id","formatDesc","cart","rate","Card","marginTop","Body","Title","Subtitle","Text","Button","onClick","onDelete","AddButton","size","block","AddModal","state","checkeds","componentWillReceiveProps","nextProps","show","setState","onSelect","index","target","checked","push","indexOf","splice","render","currencies","rates","hasOwnProperty","Check","custom","Modal","onHide","aria-labelledby","centered","Header","closeButton","Container","Footer","onSubmit","CurrencyCart","currency","addModalShow","populateCurrency","a","populateBaseOptions","calculate","updatedCart","i","handleBaseChange","onInputChange","event","openAddModal","closeAddModal","addCurrencies","ids","forEach","filter","item","length","deleteCurrencies","span","offset","App","document","title","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24a84839.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Site Navbar\r\nconst MainNavbar = () => {\r\n    return (\r\n        <Navbar variant=\"dark\" bg=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand as={Link} to={process.env.PUBLIC_URL + '/'}>David's Foreign Exchange</Navbar.Brand>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default MainNavbar;","import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.exchangeratesapi.io';\r\n\r\nexport function getCurrency(base: string){\r\n    return axios.get(`${BASE_URL}/latest?base=${base}`)\r\n            .then(response => response.data);\r\n}","import { formatMoney } from 'accounting';\r\n\r\nexport function getName(key: string) {\r\n    var name = \"\";\r\n\r\n    switch (key) {\r\n        case \"USD\":\r\n            name = \"United States Dollar\";\r\n            break;\r\n\r\n        case \"CAD\":\r\n            name = \"Canadian Dollar\";\r\n            break;\r\n\r\n        case \"IDR\":\r\n            name = \"Indonesian Rupiah\";\r\n            break;\r\n\r\n        case \"GBP\":\r\n            name = \"Pound Sterling\";\r\n            break;\r\n\r\n        case \"CHF\":\r\n            name = \"Swiss Franc\";\r\n            break;\r\n\r\n        case \"SGD\":\r\n            name = \"Singapore Dollar\";\r\n            break;\r\n\r\n        case \"INR\":\r\n            name = \"Indian Rupee\";\r\n            break;\r\n\r\n        case \"MYR\":\r\n            name = \"Malaysian Ringgit\";\r\n            break;\r\n\r\n        case \"JPY\":\r\n            name = \"Japan Yen\";\r\n            break;\r\n\r\n        case \"KRW\":\r\n            name = \"South Korean Won\";\r\n            break;\r\n\r\n        case \"HKD\":\r\n            name = \"Hong Kong Dollar\";\r\n            break;\r\n\r\n        case \"ISK\":\r\n            name = \"Icelandic Crona\";\r\n            break;\r\n\r\n\r\n        case \"PHP\":\r\n            name = \"Philipines Peso\";\r\n            break;\r\n\r\n        case \"DKK\":\r\n            name = \"Danish Krone\";\r\n            break;\r\n\r\n        case \"HUF\":\r\n            name = \"Hungarian Forint\";\r\n            break;\r\n\r\n        case \"CZK\":\r\n            name = \"Czech Koruna\";\r\n            break;\r\n\r\n        case \"RON\":\r\n            name = \"Romanian Leu\";\r\n            break;\r\n\r\n        case \"SEK\":\r\n            name = \"Swedish Krona\";\r\n            break;\r\n\r\n        case \"BRL\":\r\n            name = \"Brazilian Real\";\r\n            break;\r\n\r\n        case \"RUB\":\r\n            name = \"Russian Ruble\";\r\n            break;\r\n\r\n        case \"HRK\":\r\n            name = \"Croatian Kuna\";\r\n            break;\r\n\r\n        case \"THB\":\r\n            name = \"Thai Baht\";\r\n            break;\r\n\r\n        case \"EUR\":\r\n            name = \"Euro\";\r\n            break;\r\n\r\n        case \"BGN\":\r\n            name = \"Bulgarian Lev\";\r\n            break;\r\n\r\n\r\n        case \"TRY\":\r\n            name = \"Turkish Lira\";\r\n            break;\r\n\r\n        case \"NOK\":\r\n            name = \"Norwegian Krone\";\r\n            break;\r\n\r\n        case \"CNY\":\r\n            name = \"Chinese Yuan\";\r\n            break;\r\n\r\n        case \"NZD\":\r\n            name = \"New Zealand Dollar\";\r\n            break;\r\n\r\n        case \"ZAR\":\r\n            name = \"South African Rand\";\r\n            break;\r\n\r\n        case \"MXN\":\r\n            name = \"Mexican Peso\";\r\n            break;\r\n\r\n        case \"AUD\":\r\n            name = \"Australian Dollar\";\r\n            break;\r\n\r\n        case \"ILS\":\r\n            name = \"Israeli New Shekel\";\r\n            break;\r\n\r\n        case \"PLN\":\r\n            name = \"Poland Zloty\";\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return name;\r\n}\r\n\r\nexport function formatCurrency(input: number) {\r\n    var delimiter = ',',\r\n        separator = '.',\r\n        precision = 4;\r\n    return formatMoney(input, '', precision, delimiter, separator);\r\n}","import * as React from 'react';\r\nimport { BaseOption } from '../services/currency';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport Select from 'react-select';\r\nimport { getName } from '../services/helper';\r\n\r\nexport interface ICartHeaderProps {\r\n    // Current base currency\r\n    base: string;\r\n    // List of base currency option\r\n    baseOptions: string[];\r\n    // Function that triggered when user change base currency\r\n    onBaseChange: any;\r\n    // Store the currency input amount of base currency\r\n    amount: number;\r\n    // Function that triggered when user change input amount\r\n    onChange: any;\r\n}\r\n\r\n// Cart Header Component\r\nexport default class CartHeader extends React.Component<ICartHeaderProps>{\r\n\r\n    // Function that triggered when user change base currency\r\n    onChange = (e: any) => {\r\n        this.props.onBaseChange(e.value);\r\n    }\r\n\r\n    render() {\r\n        const options = this.props.baseOptions.map(e => {\r\n            return {\r\n                label: e,\r\n                value: e\r\n            } as BaseOption\r\n        })\r\n        const value = {\r\n            label: this.props.base,\r\n            value: this.props.base\r\n        } as BaseOption\r\n\r\n        return (\r\n            <div>\r\n                <Row style={{ marginBottom: '10px' }}>\r\n                    <Col xs={6} md={3}>\r\n                        <Select options={options} value={value} onChange={this.onChange} />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={8}>\r\n                        <h4>{this.props.base + ' - ' + getName(this.props.base)}</h4>\r\n                    </Col>\r\n                    <Col xs={4}>\r\n                        <Form.Control type=\"number\" value={this.props.amount as any} name=\"quantity\"\r\n                            onChange={this.props.onChange} className=\"float-right\"\r\n                            style={{ borderRadius: \"3px\" }} />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport { Cart } from '../services/currency';\r\nimport { getName, formatCurrency } from '../services/helper';\r\n\r\ninterface ICurrencyItemProps {\r\n    // CurrencyItem data\r\n    cart: Cart;\r\n    // Current base currency\r\n    base: string;\r\n    // Function that triggered to delete respective CurrencyItem\r\n    onDelete: any;\r\n}\r\n\r\n// Currency Item Component\r\nexport default class CurrencyItem extends React.Component<ICurrencyItemProps>{\r\n\r\n    // Format Key Name\r\n    formatKeyName = (id: string) => {\r\n        return id + ' - ' + getName(id);\r\n    }\r\n\r\n    // Format Description\r\n    formatDesc = (base: string, cart: Cart) => {\r\n        return `1 ${base} = ${cart.id} ${formatCurrency(cart.rate)}`;\r\n    }\r\n\r\n    render() {\r\n        const cart = this.props.cart;\r\n        const base = this.props.base;\r\n\r\n        return (\r\n            <Card style={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\r\n                <Card.Body>\r\n                    <Card.Title>{cart.id}</Card.Title><span className=\"float-right\"><Card.Title>{formatCurrency(cart.value)}</Card.Title></span>\r\n                    <Card.Subtitle>{this.formatKeyName(cart.id)}</Card.Subtitle>\r\n                    <Card.Text>{this.formatDesc(base, cart)}</Card.Text>\r\n                    <Button variant=\"danger\" onClick={() => { this.props.onDelete(cart.id) }}>Delete</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}","import * as React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nexport interface IAddButtonProps {\r\n    // Function that triggered to open AddModal component\r\n    onClick: any;\r\n}\r\n\r\n// Add Button Component\r\nexport default class AddButton extends React.Component<IAddButtonProps>{\r\n\r\n    render() {\r\n        return (\r\n            <Button onClick={this.props.onClick} variant=\"secondary\" size=\"lg\" block>\r\n                Add More Currency\r\n            </Button>\r\n        );\r\n\r\n    }\r\n}","import * as React from 'react';\r\nimport { Modal, Container, Row, Col, Button, Form } from 'react-bootstrap'\r\nimport { Rate } from '../services/currency';\r\nimport { getName } from '../services/helper';\r\n\r\nexport interface IAddModalProps {\r\n    // Whether modal for add currency is shown or not\r\n    show: boolean;\r\n    // Function that triggered to hide the modal\r\n    onHide: any;\r\n    // Function that triggered to submit selected item to parent component\r\n    onSubmit: any;\r\n    // List of currency's rate for select purpose\r\n    rates: Rate;\r\n}\r\n\r\nexport interface IAddModalState {\r\n    // List of selected currency\r\n    checkeds: string[];\r\n}\r\n\r\n// Add Modal Component\r\nexport default class AddModal extends React.Component<IAddModalProps> {\r\n    state = {\r\n        checkeds: [] as string[]\r\n    }\r\n\r\n    // Renew state\r\n    componentWillReceiveProps = (nextProps: any) => {\r\n        if (nextProps.show !== this.props.show) {\r\n            this.setState({ checkeds: [] as string[] })\r\n        }\r\n    }\r\n\r\n    // Function that triggered to add selected checkbox to checkeds state\r\n    onSelect = (e: any) => {\r\n        const checkeds = this.state.checkeds\r\n        let index\r\n\r\n        if (e.target.checked) {\r\n            checkeds.push(e.target.value)\r\n        } else {\r\n            index = checkeds.indexOf(e.target.value)\r\n            checkeds.splice(index, 1)\r\n        }\r\n\r\n        this.setState({ checkeds: checkeds })\r\n    }\r\n\r\n    render = () => {\r\n\r\n        // Populate checkboxes array\r\n        var currencies = [];\r\n        for (var key in this.props.rates) {\r\n            if (this.props.rates.hasOwnProperty(key)) {\r\n                currencies.push(\r\n                    <Col xs={12} md={6}>\r\n                        <Form.Check\r\n                            onChange={this.onSelect}\r\n                            id={key}\r\n                            value={key}\r\n                            custom\r\n                            type='checkbox'\r\n                            label={`${key} - ${getName(key)}`}>\r\n                        </Form.Check>\r\n                    </Col>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                onHide={this.props.onHide}\r\n                show={this.props.show}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Add New Currency\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container>\r\n                        <Row className=\"show-grid\">\r\n                            {currencies}\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={() => this.props.onSubmit(this.state.checkeds)}>Add Selected Currencies</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { getCurrency } from '../services/repository';\r\nimport { Currency, Cart } from '../services/currency';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport CartHeader from './cartHeader';\r\nimport CurrencyItem from './currencyItem';\r\nimport AddButton from './addButton';\r\nimport AddModal from './addModal';\r\nimport { getName } from '../services/helper';\r\n\r\n\r\nexport interface ICurrencyCartProps {\r\n\r\n}\r\n\r\nexport interface ICurrencyCartState {\r\n    // Store currency data that fetch from the API\r\n    currency: Currency;\r\n    // Store CurrencyItem data\r\n    cart: Cart[];\r\n    // Store the currency input amount of base currency\r\n    amount: number;\r\n    // Whether modal for add currency is shown or not\r\n    addModalShow: boolean;\r\n    // Store current base currency\r\n    base: string;\r\n    // Store base currency list\r\n    baseOptions: string[]\r\n}\r\n\r\n// Currency Cart Component\r\nexport default class CurrencyCart extends React.Component<ICurrencyCartProps, ICurrencyCartState>{\r\n    // Default state\r\n    state = {\r\n        currency: {} as Currency,\r\n        cart: [] as Cart[],\r\n        amount: 10,\r\n        addModalShow: false,\r\n        base: 'USD',\r\n        baseOptions: [] as string[],\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.populateCurrency(this.state.base);\r\n        this.populateBaseOptions();\r\n    }\r\n\r\n    // Function to populate currency data + set currency state to its result\r\n    populateCurrency = async (base: string) => {\r\n        await getCurrency(this.state.base).then((currency) => this.setState({ currency: currency }));\r\n    }\r\n\r\n    // Function to populate currency data + set baseoptions state to its result\r\n    populateBaseOptions = () => {\r\n        let baseOptions = [] as string[];\r\n        for (var key in this.state.currency.rates) {\r\n            baseOptions.push(key);\r\n        }\r\n        this.setState({\r\n            baseOptions: baseOptions\r\n        })\r\n    }\r\n\r\n    // Function to recalculate rate and value for all cart item \r\n    calculate = () => {\r\n        var updatedCart = this.state.cart.map((i) => {\r\n            i.rate = this.state.currency.rates[i.id];\r\n            i.value = this.state.currency.rates[i.id] * this.state.amount;\r\n            return i;\r\n        });\r\n        this.setState({ cart: updatedCart });\r\n    }\r\n\r\n    // Function to handle base currency change (triggered from CartHeader component)\r\n    handleBaseChange = async (base: string) => {\r\n        await this.setState({\r\n            base: base\r\n        });\r\n        await this.populateCurrency(this.state.base);\r\n        this.calculate();\r\n    }    \r\n\r\n    // Function to handle currency input change (triggered from CartHeader component)\r\n    onInputChange = async (event: any) => {\r\n        await this.setState({\r\n            amount: event.target.value\r\n        });\r\n        this.calculate();\r\n    }\r\n\r\n    // Function to open add new currency modal\r\n    openAddModal = () => {\r\n        this.setState({\r\n            addModalShow: true\r\n        });\r\n    }\r\n\r\n    // Function to close add new currency modal\r\n    closeAddModal = () => {\r\n        this.setState({\r\n            addModalShow: false\r\n        });\r\n    }\r\n\r\n    // Function to execute currency adding (triggered from AddModal component)\r\n    addCurrencies = async (ids: string[]) => {\r\n        var cart = this.state.cart;\r\n        ids.forEach(id => {\r\n            if (cart.filter(item => item.id === id).length === 0) {\r\n                cart.push({\r\n                    id: id,\r\n                    name: getName(id),\r\n                    rate: this.state.currency.rates[id],\r\n                    value: 0\r\n                })\r\n            }\r\n        });\r\n        await this.setState({\r\n            cart: cart\r\n        });\r\n        this.calculate();\r\n        this.closeAddModal();\r\n    }\r\n\r\n    // Function to execute currency adding (triggered from CurrencyItem component)\r\n    deleteCurrencies = async (id: string) => {\r\n        var updatedCart = this.state.cart;\r\n        updatedCart = updatedCart.filter((e) => {\r\n            return e.id !== id;\r\n        });\r\n        await this.setState({\r\n            cart: updatedCart\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { currency, cart } = this.state;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col xs md={{ span: 6, offset: 3 }}>\r\n                        <CartHeader\r\n                            base={this.state.base}\r\n                            baseOptions={this.state.baseOptions}\r\n                            onBaseChange={this.handleBaseChange}\r\n                            amount={this.state.amount}\r\n                            onChange={this.onInputChange} />\r\n                        {cart.map((i) =>\r\n                            <CurrencyItem cart={i} base={currency.base} onDelete={this.deleteCurrencies} />\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                <Row style={{ marginTop: '20px' }}>\r\n                    <Col xs md={{ span: 6, offset: 3 }}>\r\n                        <AddButton onClick={this.openAddModal} />\r\n                    </Col>\r\n                </Row>\r\n                <AddModal rates={this.state.currency.rates} show={this.state.addModalShow} onHide={this.closeAddModal} onSubmit={this.addCurrencies} />\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport MainNavbar from './components/mainNavbar'\nimport CurrencyCart from './components/currencyCart';\n\nclass App extends Component {\n\n  componentDidMount(){\n    document.title = \"David's Foreign Exchange\"\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          {/* Site Navbar */}\n          <MainNavbar/>\n          <div className=\"container\">\n            <br />\n            <Route exact path={process.env.PUBLIC_URL+'/'} component={CurrencyCart} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}